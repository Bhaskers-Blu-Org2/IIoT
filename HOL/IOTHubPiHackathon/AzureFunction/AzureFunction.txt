#r "../bin/Microsoft.Azure.EventHubs.dll"
#r "Newtonsoft.Json"

using Microsoft.Azure.Devices;
using Microsoft.Azure.Devices.Shared;
using Newtonsoft.Json;
using System;
using System.Text;
using Microsoft.Azure.EventHubs;

public class RaspberryPi
{
    public string DeviceId;
    public double Temperature;
    public double ExternalTemperature;
    public double Humidity;
    public double pitch;
    public double yaw;
    public double roll;
}

static ServiceClient serviceClient;

static RegistryManager registryManager;

// It is a better to store the connection string in the App Settings

// for your function and retrieve it with Environment.GetEnvironmentVariable("<setting name>")

// The CONNECTION_STRING variable should be in the form: "HostName=handsonlab230c6.azure-devices.net;SharedAccessKeyName=iothubowner;SharedAccessKey=jXbEZiTfHOfG+rrlFw5CoM47I1TE1mpz/IgKyEu0K/A="

private const string CONNECTION_STRING = "HostName=iothub-eavee.azure-devices.net;SharedAccessKeyName=iothubowner;SharedAccessKey=ng5xal8ngtQhdzqj2FtJiTP91xmgQiI/JPQVBqIMArg=";

 
public static async Task Run(EventData[] events, ILogger log)
{
    var exceptions = new List<Exception>();
	
	// Initiate the services used to interact with the IoT Hub
    serviceClient = serviceClient ?? ServiceClient.CreateFromConnectionString(CONNECTION_STRING);
    registryManager = registryManager ?? RegistryManager.CreateFromConnectionString(CONNECTION_STRING);

    foreach (EventData eventData in events)
    {
        try
        {
            string messageBody = Encoding.UTF8.GetString(eventData.Body.Array, eventData.Body.Offset, eventData.Body.Count);

            // Replace these two lines with your processing logic.
            log.LogInformation($"C# Event Hub trigger function processed a message: {messageBody}");
            await ProcessMessage(messageBody, log);
        }
        catch (Exception e)
        {
            // We need to keep processing the rest of the batch - capture this exception and continue.
            // Also, consider capturing details of the message that failed processing so it can be processed again later.
            exceptions.Add(e);
        }
    }

    // Once processing of the batch is complete, if any messages in the batch failed processing throw an exception so that there is a record of the failure.

    if (exceptions.Count > 1)
        throw new AggregateException(exceptions);

    if (exceptions.Count == 1)
        throw exceptions.Single();
}

private async static Task ProcessMessage(string myIoTHubMessage, ILogger log)
 {
    //Retrieve IoT Hub Messages

    var raspberryPi = new RaspberryPi();

    try
    {
        //(This line is what itâ€™s all about. Take the Message that trigger this function and load it into our object by deserializing it.)
        raspberryPi = Newtonsoft.Json.JsonConvert.DeserializeObject<RaspberryPi>(myIoTHubMessage);
    }
    catch (Exception ex)
    {
        log.LogInformation($"Error deserializing: {ex.Message}");

        return;
    }

    // Retrieve the digital twin from the IoT Hub.

    Twin twin = await registryManager.GetTwinAsync(raspberryPi.DeviceId);

    if (twin != null)
    {
		log.LogInformation("Twin Properties:");

        log.LogInformation(twin.Properties.Desired.ToJson());

        log.LogInformation(twin.Properties.Reported.ToJson());

        log.LogInformation(twin.Tags.ToJson());

    }
    else
	{
        log.LogInformation("Twin not retrieved");
	}

    double highTemperatureLimit = 40;

    if (twin.Tags.Contains("HighTemperatureLimit"))
	{
        highTemperatureLimit = twin.Tags["HighTemperatureLimit"];
	}

    var temperatureStatus = "Normal";

    if (twin.Tags.Contains("TemperatureStatus"))
	{
        temperatureStatus = twin.Tags["TemperatureStatus"];
	}

    if (raspberryPi.Temperature >= highTemperatureLimit && temperatureStatus != "High")
    {
        log.LogInformation("Changing status to Hot");

        await SendCloudToDeviceMessageAsync(raspberryPi.DeviceId, "High");

        await AddTag(twin, "High");
    }
    else if (raspberryPi.Temperature < highTemperatureLimit && temperatureStatus != "Normal")
    {
        log.LogInformation("Changing status to Normal");

        await SendCloudToDeviceMessageAsync(raspberryPi.DeviceId, "Normal");

        await AddTag(twin, "Normal");
    }
 }

/// <summary>
/// Sends a message to the device via a method.  If the device is not active an error occurs.
/// </summary>
/// <param name="deviceId">The device identifier</param>
/// <param name="message">Text to send to the device</param>
/// <returns></returns>
private async static Task SendCloudToDeviceMessageAsync(string deviceId, string message)
{
    var commandMessage = new Message(Encoding.ASCII.GetBytes(message));

    await serviceClient.SendAsync(deviceId, commandMessage);
}

/// <summary>
/// Updates the device registry "TemperatureStatus" tag
/// </summary>
/// <param name="twin">The devices twin</param>
/// <param name="status">The new status</param>
/// <returns></returns>

public static async Task AddTag(Twin twin, string status)
{
    string patch =
        @"{{
             tags: {{
                 TemperatureStatus: ""{0}""
                }}
         }}";

    patch = string.Format(patch, status);

    await registryManager.UpdateTwinAsync(twin.DeviceId, patch, twin.ETag);
}